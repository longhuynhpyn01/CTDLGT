#include <iostream> 
using namespace std;

// A utility function to swap two elements  
void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}

/* This function takes last element as pivot, places
the pivot element at its correct position in sorted
array, and places all smaller (smaller than pivot)
to left of pivot and all greater elements to right
of pivot */

int partition(int arr[], int low, int high)
{
    int pivot = arr[low];
    int i = low, j = high + 1;

    while (i < j)
    {
        do{
        i++;
        } while (arr[i] <= pivot);
        do{
        j--;
        } while (arr[j] > pivot);
        if (i < j) {
            swap(&arr[i], &arr[j]);
        }
    } 
    swap(&arr[low], &arr[j]);
    return j;
}

/* The main function that implements QuickSort
arr[] --> Array to be sorted,
low --> Starting index,
high --> Ending index */
int partition2(int arr[], int low, int high)
{
    int pivot = arr[low];
    int i = low, j = high + 1;

    while (i < j)
    {
        do {
            i++;
        } while (arr[i] >= pivot);
        do {
            j--;
        } while (arr[j] < pivot);
        if (i < j) {
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[low], &arr[j]);
    return j;
}
void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        /* pi is partitioning index, arr[p] is now
        at right place */
        //int pi = partition(arr, low, high);
        /*int i = low, j = high;
        int pivot = arr[low];
        do {
            while (arr[i] < pivot) ++i;
            while (arr[j] > pivot) --j;
            if (i <= j) {
                swap(&arr[i], &arr[j]);
                ++i; --j;
            }
        } while (i < j);
        // Separately sort elements before  
        // partition and after partition  
        quickSort(arr, low, j);
        quickSort(arr, i, high);*/
        int j = partition2(arr, low, high);
        quickSort(arr, low, j - 1);
        quickSort(arr, j + 1, high);
    }
}

/* Function to print an array */
void printArray(int arr[], int size)
{
    int i;
    for (i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}

// Driver Code 
int main()
{
    int arr[] = { 12, 11, 14,7,13,11,13, 5, 6 };

    int n = sizeof(arr) / sizeof(arr[0]);
    quickSort(arr, 0, n - 1);
    cout << "Sorted array: \n";
    printArray(arr, n);
    return 0;
}
