#include<iostream> 
using namespace std;

// Merges two subarrays of arr[]. 
// First subarray is arr[l..m] 
// Second subarray is arr[m+1..r] 
void merge(int arr[], int l, int m, int r)
{
    int n1 = m - l + 1;
    int n2 = r - m;

    // Create temp arrays  
    //int L[n1], R[n2];
    int* L = new int[n1];
    int* R = new int[n2];

    // Copy data to temp arrays L[] and R[]  
    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    // Merge the temp arrays back into arr[l..r] 

    int i = 0, j = 0, k = l;

    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k++] = L[i++];
        }
        else
        {
            arr[k++] = R[j++];
        }
    }

    for (; i < n1; i++)
        arr[k++] = L[i];
    for (; i < n2; i++)
        arr[k++] = R[i];
    delete[] L;
    delete[] R;
}

// l is for left index and r is  
// right index of the sub-array 
// of arr to be sorted */ 
void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {

        // Same as (l+r)/2, but avoids  
        // overflow for large l and h 
        int m = l + (r - l) / 2;

        // Sort first and second halves 
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        merge(arr, l, m, r);
    }
}

// UTILITY FUNCTIONS  
// Function to print an array  
void printArray(int A[], int size)
{
    for (int i = 0; i < size; i++)
        cout << A[i] << " ";
}

void merge1(int arr[], int l, int m, int r)
{
    int n1 = m - l + 1;
    int n2 = r - m;

    // Create temp arrays  
    //int L[n1], R[n2];
    int* L = new int[n1];
    int* R = new int[n2];

    // Copy data to temp arrays L[] and R[]  
    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    // Merge the temp arrays back into arr[l..r] 

    int i = 0, j = 0, k = l;

    while (i < n1 && j < n2)
    {
        if (L[i] >= R[j])
        {
            arr[k++] = L[i++];
        }
        else
        {
            arr[k++] = R[j++];
        }
    }

    for (; i < n1; i++)
        arr[k++] = L[i];
    for (; i < n2; i++)
        arr[k++] = R[i];
    delete[] L;
    delete[] R;
}
void mergeSort1(int arr[], int l, int r)
{
    if (l < r)
    {

        // Same as (l+r)/2, but avoids  
        // overflow for large l and h 
        int m = l + (r - l) / 2;

        // Sort first and second halves 
        mergeSort1(arr, l, m);
        mergeSort1(arr, m + 1, r);

        merge1(arr, l, m, r);
    }
}
// Driver code 
int main()
{
    int arr[] = { 12, 11, 14,74,15,64,19,92,29,34 };
    int arr_size = sizeof(arr) / sizeof(arr[0]);

    cout << "Given array is \n";
    printArray(arr, arr_size);

    mergeSort1(arr, 0, arr_size - 1);

    cout << "\nSorted array is \n";
    printArray(arr, arr_size);
    return 0;
}
